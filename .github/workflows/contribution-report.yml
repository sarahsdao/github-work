name: Generate GitHub Contribution Report

on:
  schedule:
    - cron: "0 19 * * 5"  # Runs every Friday at 3 PM EST
  workflow_dispatch:

jobs:
  generate-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch GitHub Contributions (Last 7 Days)
        run: |
          USERNAME="sarahsdao"
          TOKEN="${{ secrets.WEEKLYCLASSIC }}"
          DATE=$(TZ="America/New_York" date +"%Y-%m-%d")  
          REPORT_FILE="reports/contributions-$DATE.md"
          mkdir -p reports
          REPORT="## 📝 Weekly Contribution Report ($DATE)\n\n"
          ORGS=("rstudio" "posit-dev")
          DATE_LIMIT=$(TZ="America/Chicago" date -d "7 days ago" --utc +"%Y-%m-%dT%H:%M:%SZ")
          # Global Counters
          TOTAL_ISSUES=0
          TOTAL_CLOSED_ISSUES=0
          TOTAL_PRS=0
          TOTAL_MERGED_PRS=0
          TOTAL_REVIEWS=0
          for ORG in "${ORGS[@]}"; do
            EVENTS=$(curl -s -H "Authorization: token $TOKEN" "https://api.github.com/users/$USERNAME/events?per_page=100")
            ACTIVE_REPOS=$(echo "$EVENTS" | jq -r --arg DATE "$DATE_LIMIT" '[.[] | select(.created_at > $DATE) | .repo.name] | unique | .[]')
            if [[ -z "$ACTIVE_REPOS" ]]; then
              continue
            fi
            
            REPORT+="## 🔹 Organization: [$ORG](https://github.com/$ORG)\n\n"
            for REPO in $ACTIVE_REPOS; do
              if [[ "$REPO" != "$ORG/"* ]]; then
                continue
              fi
              
              # Count contributions per category for this repo
              ISSUE_COUNT=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="IssuesEvent" and .payload.action=="opened" and .repo.name==$REPO and .created_at > $DATE)] | length')
              CLOSED_ISSUE_COUNT=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="IssuesEvent" and .payload.action=="closed" and .repo.name==$REPO and .created_at > $DATE)] | length')
              PR_COUNT=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="PullRequestEvent" and .payload.action=="opened" and .repo.name==$REPO and .created_at > $DATE)] | length')
              MERGED_PR_COUNT=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="PullRequestEvent" and .payload.action=="closed" and .payload.pull_request.merged == true and .repo.name==$REPO and .created_at > $DATE)] | length')
              REVIEW_COUNT=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="PullRequestReviewEvent" and .repo.name==$REPO and .created_at > $DATE)] | length')
              # Update Global Totals
              TOTAL_ISSUES=$((TOTAL_ISSUES + ISSUE_COUNT))
              TOTAL_CLOSED_ISSUES=$((TOTAL_CLOSED_ISSUES + CLOSED_ISSUE_COUNT))
              TOTAL_PRS=$((TOTAL_PRS + PR_COUNT))
              TOTAL_MERGED_PRS=$((TOTAL_MERGED_PRS + MERGED_PR_COUNT))
              TOTAL_REVIEWS=$((TOTAL_REVIEWS + REVIEW_COUNT))
              REPORT+="### 📌 Repository: [$REPO](https://github.com/$REPO)\n\n"
              REPORT+="**Summary:**\n"
              REPORT+="- 🐞 Issues Opened: $ISSUE_COUNT\n"
              REPORT+="- 🚪 Issues Closed: $CLOSED_ISSUE_COUNT\n"
              REPORT+="- 🔀 PRs Opened: $PR_COUNT\n"
              REPORT+="- 🔒 PRs Merged: $MERGED_PR_COUNT\n"
              REPORT+="- 📝 PR Reviews: $REVIEW_COUNT\n\n"
              # Fetch detailed lists
              ISSUES=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="IssuesEvent" and .payload.action=="opened" and .repo.name==$REPO and .created_at > $DATE)] | map("- [\(.payload.issue.title)](\(.payload.issue.html_url))") | join("\n")')
              REPORT+="#### 🐞 Issues Opened ($TOTAL_ISSUES total):\n${ISSUES:-_No new issues_\n}\n\n"
              CLOSED_ISSUES=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="IssuesEvent" and .payload.action=="closed" and .repo.name==$REPO and .created_at > $DATE)] | map("- [\(.payload.issue.title)](\(.payload.issue.html_url))") | join("\n")')
              REPORT+="#### 🚪 Issues Closed ($TOTAL_CLOSED_ISSUES total):\n${CLOSED_ISSUES:-_No closed issues_\n}\n\n"
              PRS=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="PullRequestEvent" and .payload.action=="opened" and .repo.name==$REPO and .created_at > $DATE)] | map("- [\(.payload.pull_request.title)](\(.payload.pull_request.html_url))") | join("\n")')
              REPORT+="#### 🔀 Pull Requests Opened ($TOTAL_PRS total):\n${PRS:-_No new PRs_\n}\n\n"
              MERGED_PRS=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="PullRequestEvent" and .payload.action=="closed" and .payload.pull_request.merged == true and .repo.name==$REPO and .created_at > $DATE)] | map("- [\(.payload.pull_request.title)](\(.payload.pull_request.html_url))") | join("\n")')
              REPORT+="#### 🔒 Merged Pull Requests ($TOTAL_MERGED_PRS total):\n${MERGED_PRS:-_No merged PRs_\n}\n\n"
              REVIEWS=$(echo "$EVENTS" | jq -r --arg REPO "$REPO" --arg DATE "$DATE_LIMIT" '[.[] | select(.type=="PullRequestReviewEvent" and .repo.name==$REPO and .created_at > $DATE)] | map("- [Reviewed PR #\(.payload.pull_request.number)](\(.payload.review.html_url))") | join("\n")')
              REPORT+="#### 📝 PR Reviews ($TOTAL_REVIEWS total):\n${REVIEWS:-_No new reviews_\n}\n\n"
              REPORT+="---\n"
            done
          done
          echo -e "$REPORT" > "$REPORT_FILE"